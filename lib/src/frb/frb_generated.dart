// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/js.dart';
import 'api/value.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class LibFjs extends BaseEntrypoint<LibFjsApi, LibFjsApiImpl, LibFjsWire> {
  @internal
  static final instance = LibFjs._();

  LibFjs._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    LibFjsApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required LibFjsApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<LibFjsApiImpl, LibFjsWire> get apiImplConstructor =>
      LibFjsApiImpl.new;

  @override
  WireConstructor<LibFjsWire> get wireConstructor =>
      LibFjsWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => 1099304974;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'fjs',
    ioDirectory: 'libfjs/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class LibFjsApi extends BaseApi {
  Future<EvalResult> crateApiJsAsyncContextEval(
      {required AsyncContext that, required String code});

  Future<EvalResult> crateApiJsAsyncContextEvalFile(
      {required AsyncContext that, required String path});

  Future<EvalResult> crateApiJsAsyncContextEvalFileWithOptions(
      {required AsyncContext that,
      required String path,
      required EvalOptions options});

  Future<EvalResult> crateApiJsAsyncContextEvalFunction(
      {required AsyncContext that,
      required String module,
      required String method,
      List<JsValue>? params});

  Future<EvalResult> crateApiJsAsyncContextEvalWithOptions(
      {required AsyncContext that,
      required String code,
      required EvalOptions options});

  Future<AsyncContext> crateApiJsAsyncContextFull({required AsyncRuntime rt});

  Future<bool> crateApiJsAsyncRuntimeExecutePendingJob(
      {required AsyncRuntime that});

  Future<void> crateApiJsAsyncRuntimeIdle({required AsyncRuntime that});

  Future<bool> crateApiJsAsyncRuntimeIsJobPending({required AsyncRuntime that});

  Future<MemoryUsage> crateApiJsAsyncRuntimeMemoryUsage(
      {required AsyncRuntime that});

  AsyncRuntime crateApiJsAsyncRuntimeNew();

  Future<void> crateApiJsAsyncRuntimeRunGc({required AsyncRuntime that});

  Future<void> crateApiJsAsyncRuntimeSetGcThreshold(
      {required AsyncRuntime that, required BigInt threshold});

  Future<void> crateApiJsAsyncRuntimeSetMaxStackSize(
      {required AsyncRuntime that, required BigInt limit});

  Future<void> crateApiJsAsyncRuntimeSetMemoryLimit(
      {required AsyncRuntime that, required BigInt limit});

  Future<void> crateApiJsAsyncRuntimeSetModules(
      {required AsyncRuntime that, required List<JsModule> modules});

  EvalOptions crateApiJsEvalOptionsNew();

  Future<void> crateApiInitApp();

  JsModule crateApiJsJsModuleFromCode(
      {required String module, required String code});

  JsModule crateApiJsJsModuleFromPath(
      {required String module, required String path});

  JsModule crateApiJsJsModuleNew(
      {required String module, String? code, String? path});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AsyncContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AsyncContext;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AsyncContextPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AsyncRuntime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AsyncRuntime;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AsyncRuntimePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MemoryUsage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MemoryUsage;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MemoryUsagePtr;
}

class LibFjsApiImpl extends LibFjsApiImplPlatform implements LibFjsApi {
  LibFjsApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<EvalResult> crateApiJsAsyncContextEval(
      {required AsyncContext that, required String code}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
            that, serializer);
        sse_encode_String(code, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncContextEvalConstMeta,
      argValues: [that, code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncContextEvalConstMeta => const TaskConstMeta(
        debugName: "AsyncContext_eval",
        argNames: ["that", "code"],
      );

  @override
  Future<EvalResult> crateApiJsAsyncContextEvalFile(
      {required AsyncContext that, required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
            that, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncContextEvalFileConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncContextEvalFileConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncContext_eval_file",
        argNames: ["that", "path"],
      );

  @override
  Future<EvalResult> crateApiJsAsyncContextEvalFileWithOptions(
      {required AsyncContext that,
      required String path,
      required EvalOptions options}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
            that, serializer);
        sse_encode_String(path, serializer);
        sse_encode_box_autoadd_eval_options(options, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncContextEvalFileWithOptionsConstMeta,
      argValues: [that, path, options],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncContextEvalFileWithOptionsConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncContext_eval_file_with_options",
        argNames: ["that", "path", "options"],
      );

  @override
  Future<EvalResult> crateApiJsAsyncContextEvalFunction(
      {required AsyncContext that,
      required String module,
      required String method,
      List<JsValue>? params}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
            that, serializer);
        sse_encode_String(module, serializer);
        sse_encode_String(method, serializer);
        sse_encode_opt_list_js_value(params, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncContextEvalFunctionConstMeta,
      argValues: [that, module, method, params],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncContextEvalFunctionConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncContext_eval_function",
        argNames: ["that", "module", "method", "params"],
      );

  @override
  Future<EvalResult> crateApiJsAsyncContextEvalWithOptions(
      {required AsyncContext that,
      required String code,
      required EvalOptions options}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
            that, serializer);
        sse_encode_String(code, serializer);
        sse_encode_box_autoadd_eval_options(options, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncContextEvalWithOptionsConstMeta,
      argValues: [that, code, options],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncContextEvalWithOptionsConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncContext_eval_with_options",
        argNames: ["that", "code", "options"],
      );

  @override
  Future<AsyncContext> crateApiJsAsyncContextFull({required AsyncRuntime rt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
            rt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsAsyncContextFullConstMeta,
      argValues: [rt],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncContextFullConstMeta => const TaskConstMeta(
        debugName: "AsyncContext_full",
        argNames: ["rt"],
      );

  @override
  Future<bool> crateApiJsAsyncRuntimeExecutePendingJob(
      {required AsyncRuntime that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsAsyncRuntimeExecutePendingJobConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncRuntimeExecutePendingJobConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncRuntime_execute_pending_job",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiJsAsyncRuntimeIdle({required AsyncRuntime that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncRuntimeIdleConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncRuntimeIdleConstMeta => const TaskConstMeta(
        debugName: "AsyncRuntime_idle",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiJsAsyncRuntimeIsJobPending(
      {required AsyncRuntime that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncRuntimeIsJobPendingConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncRuntimeIsJobPendingConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncRuntime_is_job_pending",
        argNames: ["that"],
      );

  @override
  Future<MemoryUsage> crateApiJsAsyncRuntimeMemoryUsage(
      {required AsyncRuntime that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncRuntimeMemoryUsageConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncRuntimeMemoryUsageConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncRuntime_memory_usage",
        argNames: ["that"],
      );

  @override
  AsyncRuntime crateApiJsAsyncRuntimeNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsAsyncRuntimeNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncRuntimeNewConstMeta => const TaskConstMeta(
        debugName: "AsyncRuntime_new",
        argNames: [],
      );

  @override
  Future<void> crateApiJsAsyncRuntimeRunGc({required AsyncRuntime that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncRuntimeRunGcConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncRuntimeRunGcConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncRuntime_run_gc",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiJsAsyncRuntimeSetGcThreshold(
      {required AsyncRuntime that, required BigInt threshold}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
            that, serializer);
        sse_encode_usize(threshold, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncRuntimeSetGcThresholdConstMeta,
      argValues: [that, threshold],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncRuntimeSetGcThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncRuntime_set_gc_threshold",
        argNames: ["that", "threshold"],
      );

  @override
  Future<void> crateApiJsAsyncRuntimeSetMaxStackSize(
      {required AsyncRuntime that, required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
            that, serializer);
        sse_encode_usize(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncRuntimeSetMaxStackSizeConstMeta,
      argValues: [that, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncRuntimeSetMaxStackSizeConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncRuntime_set_max_stack_size",
        argNames: ["that", "limit"],
      );

  @override
  Future<void> crateApiJsAsyncRuntimeSetMemoryLimit(
      {required AsyncRuntime that, required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
            that, serializer);
        sse_encode_usize(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsAsyncRuntimeSetMemoryLimitConstMeta,
      argValues: [that, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncRuntimeSetMemoryLimitConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncRuntime_set_memory_limit",
        argNames: ["that", "limit"],
      );

  @override
  Future<void> crateApiJsAsyncRuntimeSetModules(
      {required AsyncRuntime that, required List<JsModule> modules}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
            that, serializer);
        sse_encode_list_js_module(modules, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsAsyncRuntimeSetModulesConstMeta,
      argValues: [that, modules],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsAsyncRuntimeSetModulesConstMeta =>
      const TaskConstMeta(
        debugName: "AsyncRuntime_set_modules",
        argNames: ["that", "modules"],
      );

  @override
  EvalOptions crateApiJsEvalOptionsNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_eval_options,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsEvalOptionsNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsEvalOptionsNewConstMeta => const TaskConstMeta(
        debugName: "eval_options_new",
        argNames: [],
      );

  @override
  Future<void> crateApiInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  JsModule crateApiJsJsModuleFromCode(
      {required String module, required String code}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(module, serializer);
        sse_encode_String(code, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_module,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsModuleFromCodeConstMeta,
      argValues: [module, code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsModuleFromCodeConstMeta => const TaskConstMeta(
        debugName: "js_module_from_code",
        argNames: ["module", "code"],
      );

  @override
  JsModule crateApiJsJsModuleFromPath(
      {required String module, required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(module, serializer);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_module,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsModuleFromPathConstMeta,
      argValues: [module, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsModuleFromPathConstMeta => const TaskConstMeta(
        debugName: "js_module_from_path",
        argNames: ["module", "path"],
      );

  @override
  JsModule crateApiJsJsModuleNew(
      {required String module, String? code, String? path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(module, serializer);
        sse_encode_opt_String(code, serializer);
        sse_encode_opt_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_module,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsModuleNewConstMeta,
      argValues: [module, code, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsModuleNewConstMeta => const TaskConstMeta(
        debugName: "js_module_new",
        argNames: ["module", "code", "path"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AsyncContext => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AsyncContext => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AsyncRuntime => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AsyncRuntime => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MemoryUsage => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MemoryUsage => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  AsyncContext
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AsyncContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AsyncRuntime
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AsyncRuntimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MemoryUsage
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MemoryUsageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AsyncContext
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AsyncContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AsyncRuntime
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AsyncRuntimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AsyncContext
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AsyncContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AsyncRuntime
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AsyncRuntimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MemoryUsage
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MemoryUsageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  EvalOptions dco_decode_box_autoadd_eval_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_eval_options(raw);
  }

  @protected
  JsValue dco_decode_box_autoadd_js_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_js_value(raw);
  }

  @protected
  EvalOptions dco_decode_eval_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return EvalOptions.raw(
      global: dco_decode_bool(arr[0]),
      strict: dco_decode_bool(arr[1]),
      backtraceBarrier: dco_decode_bool(arr[2]),
    );
  }

  @protected
  EvalResult dco_decode_eval_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EvalResult_Ok(
          dco_decode_box_autoadd_js_value(raw[1]),
        );
      case 1:
        return EvalResult_Err(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  JsModule dco_decode_js_module(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return JsModule_Code(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
        );
      case 1:
        return JsModule_Path(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  JsValue dco_decode_js_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return const JsValue_Null();
      case 1:
        return JsValue_Boolean(
          dco_decode_bool(raw[1]),
        );
      case 2:
        return JsValue_Integer(
          dco_decode_i_64(raw[1]),
        );
      case 3:
        return JsValue_Float(
          dco_decode_f_64(raw[1]),
        );
      case 4:
        return JsValue_Bigint(
          dco_decode_String(raw[1]),
        );
      case 5:
        return JsValue_String(
          dco_decode_String(raw[1]),
        );
      case 6:
        return JsValue_Array(
          dco_decode_list_js_value(raw[1]),
        );
      case 7:
        return JsValue_Object(
          dco_decode_list_key_value(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  KeyValue dco_decode_key_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return KeyValue(
      key: dco_decode_String(arr[0]),
      value: dco_decode_js_value(arr[1]),
    );
  }

  @protected
  List<JsModule> dco_decode_list_js_module(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_js_module).toList();
  }

  @protected
  List<JsValue> dco_decode_list_js_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_js_value).toList();
  }

  @protected
  List<KeyValue> dco_decode_list_key_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_key_value).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  List<JsValue>? dco_decode_opt_list_js_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_js_value(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  AsyncContext
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AsyncContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AsyncRuntime
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AsyncRuntimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MemoryUsage
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MemoryUsageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AsyncContext
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AsyncContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AsyncRuntime
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AsyncRuntimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AsyncContext
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AsyncContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AsyncRuntime
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AsyncRuntimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MemoryUsage
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MemoryUsageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  EvalOptions sse_decode_box_autoadd_eval_options(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_eval_options(deserializer));
  }

  @protected
  JsValue sse_decode_box_autoadd_js_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_js_value(deserializer));
  }

  @protected
  EvalOptions sse_decode_eval_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_global = sse_decode_bool(deserializer);
    var var_strict = sse_decode_bool(deserializer);
    var var_backtraceBarrier = sse_decode_bool(deserializer);
    return EvalOptions.raw(
        global: var_global,
        strict: var_strict,
        backtraceBarrier: var_backtraceBarrier);
  }

  @protected
  EvalResult sse_decode_eval_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_js_value(deserializer);
        return EvalResult_Ok(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return EvalResult_Err(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  JsModule sse_decode_js_module(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return JsModule_Code(var_field0, var_field1);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return JsModule_Path(var_field0, var_field1);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  JsValue sse_decode_js_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return const JsValue_Null();
      case 1:
        var var_field0 = sse_decode_bool(deserializer);
        return JsValue_Boolean(var_field0);
      case 2:
        var var_field0 = sse_decode_i_64(deserializer);
        return JsValue_Integer(var_field0);
      case 3:
        var var_field0 = sse_decode_f_64(deserializer);
        return JsValue_Float(var_field0);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return JsValue_Bigint(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return JsValue_String(var_field0);
      case 6:
        var var_field0 = sse_decode_list_js_value(deserializer);
        return JsValue_Array(var_field0);
      case 7:
        var var_field0 = sse_decode_list_key_value(deserializer);
        return JsValue_Object(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  KeyValue sse_decode_key_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_js_value(deserializer);
    return KeyValue(key: var_key, value: var_value);
  }

  @protected
  List<JsModule> sse_decode_list_js_module(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <JsModule>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_js_module(deserializer));
    }
    return ans_;
  }

  @protected
  List<JsValue> sse_decode_list_js_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <JsValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_js_value(deserializer));
    }
    return ans_;
  }

  @protected
  List<KeyValue> sse_decode_list_key_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <KeyValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_key_value(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<JsValue>? sse_decode_opt_list_js_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_js_value(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
          AsyncContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AsyncContextImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
          AsyncRuntime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AsyncRuntimeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          MemoryUsage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MemoryUsageImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
          AsyncContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AsyncContextImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
          AsyncRuntime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AsyncRuntimeImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncContext(
          AsyncContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AsyncContextImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsyncRuntime(
          AsyncRuntime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AsyncRuntimeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          MemoryUsage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MemoryUsageImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_eval_options(
      EvalOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_eval_options(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_js_value(JsValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_js_value(self, serializer);
  }

  @protected
  void sse_encode_eval_options(EvalOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.global, serializer);
    sse_encode_bool(self.strict, serializer);
    sse_encode_bool(self.backtraceBarrier, serializer);
  }

  @protected
  void sse_encode_eval_result(EvalResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EvalResult_Ok(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_js_value(field0, serializer);
      case EvalResult_Err(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_js_module(JsModule self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case JsModule_Code(field0: final field0, field1: final field1):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
      case JsModule_Path(field0: final field0, field1: final field1):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
    }
  }

  @protected
  void sse_encode_js_value(JsValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case JsValue_Null():
        sse_encode_i_32(0, serializer);
      case JsValue_Boolean(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(field0, serializer);
      case JsValue_Integer(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_i_64(field0, serializer);
      case JsValue_Float(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_f_64(field0, serializer);
      case JsValue_Bigint(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
      case JsValue_String(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
      case JsValue_Array(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_list_js_value(field0, serializer);
      case JsValue_Object(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_list_key_value(field0, serializer);
    }
  }

  @protected
  void sse_encode_key_value(KeyValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_js_value(self.value, serializer);
  }

  @protected
  void sse_encode_list_js_module(
      List<JsModule> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_js_module(item, serializer);
    }
  }

  @protected
  void sse_encode_list_js_value(List<JsValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_js_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_key_value(
      List<KeyValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_key_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_js_value(
      List<JsValue>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_js_value(self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class AsyncContextImpl extends RustOpaque implements AsyncContext {
  // Not to be used by end users
  AsyncContextImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AsyncContextImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibFjs.instance.api.rust_arc_increment_strong_count_AsyncContext,
    rustArcDecrementStrongCount:
        LibFjs.instance.api.rust_arc_decrement_strong_count_AsyncContext,
    rustArcDecrementStrongCountPtr:
        LibFjs.instance.api.rust_arc_decrement_strong_count_AsyncContextPtr,
  );

  Future<EvalResult> eval({required String code}) =>
      LibFjs.instance.api.crateApiJsAsyncContextEval(that: this, code: code);

  Future<EvalResult> evalFile({required String path}) => LibFjs.instance.api
      .crateApiJsAsyncContextEvalFile(that: this, path: path);

  Future<EvalResult> evalFileWithOptions(
          {required String path, required EvalOptions options}) =>
      LibFjs.instance.api.crateApiJsAsyncContextEvalFileWithOptions(
          that: this, path: path, options: options);

  Future<EvalResult> evalFunction(
          {required String module,
          required String method,
          List<JsValue>? params}) =>
      LibFjs.instance.api.crateApiJsAsyncContextEvalFunction(
          that: this, module: module, method: method, params: params);

  Future<EvalResult> evalWithOptions(
          {required String code, required EvalOptions options}) =>
      LibFjs.instance.api.crateApiJsAsyncContextEvalWithOptions(
          that: this, code: code, options: options);
}

@sealed
class AsyncRuntimeImpl extends RustOpaque implements AsyncRuntime {
  // Not to be used by end users
  AsyncRuntimeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AsyncRuntimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibFjs.instance.api.rust_arc_increment_strong_count_AsyncRuntime,
    rustArcDecrementStrongCount:
        LibFjs.instance.api.rust_arc_decrement_strong_count_AsyncRuntime,
    rustArcDecrementStrongCountPtr:
        LibFjs.instance.api.rust_arc_decrement_strong_count_AsyncRuntimePtr,
  );

  Future<bool> executePendingJob() =>
      LibFjs.instance.api.crateApiJsAsyncRuntimeExecutePendingJob(
        that: this,
      );

  Future<void> idle() => LibFjs.instance.api.crateApiJsAsyncRuntimeIdle(
        that: this,
      );

  Future<bool> isJobPending() =>
      LibFjs.instance.api.crateApiJsAsyncRuntimeIsJobPending(
        that: this,
      );

  Future<MemoryUsage> memoryUsage() =>
      LibFjs.instance.api.crateApiJsAsyncRuntimeMemoryUsage(
        that: this,
      );

  Future<void> runGc() => LibFjs.instance.api.crateApiJsAsyncRuntimeRunGc(
        that: this,
      );

  Future<void> setGcThreshold({required BigInt threshold}) => LibFjs
      .instance.api
      .crateApiJsAsyncRuntimeSetGcThreshold(that: this, threshold: threshold);

  Future<void> setMaxStackSize({required BigInt limit}) => LibFjs.instance.api
      .crateApiJsAsyncRuntimeSetMaxStackSize(that: this, limit: limit);

  Future<void> setMemoryLimit({required BigInt limit}) => LibFjs.instance.api
      .crateApiJsAsyncRuntimeSetMemoryLimit(that: this, limit: limit);

  Future<void> setModules({required List<JsModule> modules}) =>
      LibFjs.instance.api
          .crateApiJsAsyncRuntimeSetModules(that: this, modules: modules);
}

@sealed
class MemoryUsageImpl extends RustOpaque implements MemoryUsage {
  // Not to be used by end users
  MemoryUsageImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MemoryUsageImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibFjs.instance.api.rust_arc_increment_strong_count_MemoryUsage,
    rustArcDecrementStrongCount:
        LibFjs.instance.api.rust_arc_decrement_strong_count_MemoryUsage,
    rustArcDecrementStrongCountPtr:
        LibFjs.instance.api.rust_arc_decrement_strong_count_MemoryUsagePtr,
  );
}
