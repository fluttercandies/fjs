// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'value.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `from_js`, `into_js`

@freezed
sealed class JsValue with _$JsValue {
  const JsValue._();

  const factory JsValue.null_() = JsValue_Null;
  const factory JsValue.boolean(
    bool field0,
  ) = JsValue_Boolean;
  const factory JsValue.integer(
    PlatformInt64 field0,
  ) = JsValue_Integer;
  const factory JsValue.float(
    double field0,
  ) = JsValue_Float;
  const factory JsValue.bigint(
    String field0,
  ) = JsValue_Bigint;
  const factory JsValue.string(
    String field0,
  ) = JsValue_String;
  const factory JsValue.array(
    List<JsValue> field0,
  ) = JsValue_Array;
  const factory JsValue.object(
    List<KeyValue> field0,
  ) = JsValue_Object;

  static JsValue from(Object? any) {
    if (any == null) {
      return const JsValue.null_();
    } else if (any is bool) {
      return JsValue.boolean(any);
    } else if (any is int) {
      return JsValue.integer(any);
    } else if (any is double) {
      return JsValue.float(any);
    } else if (any is BigInt) {
      return JsValue.bigint(any.toString());
    } else if (any is String) {
      return JsValue.string(any);
    } else if (any is List) {
      return JsValue.array(any.map((e) => from(e)).toList());
    } else if (any is Map) {
      return JsValue.object(
        any.entries
            .map((e) => KeyValue(key: e.key.toString(), value: from(e.value)))
            .toList(),
      );
    } else {
      throw Exception("Unsupported type: ${any.runtimeType}");
    }
  }

  get value => when(
        null_: () => null,
        boolean: (v) => v,
        integer: (v) => v,
        float: (v) => v,
        bigint: (v) => BigInt.parse(v),
        string: (v) => v,
        array: (v) => v.map((e) => e.value).toList(),
        object: (v) =>
            Map.fromEntries(v.map((e) => MapEntry(e.key, e.value.value))),
      );
}

@freezed
@immutable
class KeyValue with _$KeyValue {
  const factory KeyValue({
    required String key,
    required JsValue value,
  }) = _KeyValue;
}
