// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'value.freezed.dart';

            // These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `from_js`, `into_js`


            

            @freezed
                sealed class JsValue with _$JsValue  {
                    const JsValue._();

                     /// Represents null or undefined values in JavaScript
const factory JsValue.none() = JsValue_None;
 /// Represents boolean values (true/false)
const factory JsValue.boolean(  bool field0,) = JsValue_Boolean;
 /// Represents 64-bit integer values
const factory JsValue.integer(  PlatformInt64 field0,) = JsValue_Integer;
 /// Represents floating-point number values
const factory JsValue.float(  double field0,) = JsValue_Float;
 /// Represents BigInt values stored as strings for precision
const factory JsValue.bigint(  String field0,) = JsValue_Bigint;
 /// Represents string values
const factory JsValue.string(  String field0,) = JsValue_String;
 /// Represents arrays with nested value support
const factory JsValue.array(  List<JsValue> field0,) = JsValue_Array;
 /// Represents objects with string keys and arbitrary values
const factory JsValue.object(  Map<String, JsValue> field0,) = JsValue_Object;

                    

                    

  static JsValue from(Object? any) {
    if (any == null) {
      return const JsValue.none();
    } else if (any is bool) {
      return JsValue.boolean(any);
    } else if (any is int) {
      return JsValue.integer(any);
    } else if (any is double) {
      return JsValue.float(any);
    } else if (any is BigInt) {
      return JsValue.bigint(any.toString());
    } else if (any is String) {
      return JsValue.string(any);
    } else if (any is List) {
      return JsValue.array(any.map((e) => from(e)).toList());
    } else if (any is Map) {
      return JsValue.object(
        any.map((key, value) => MapEntry(key.toString(), from(value))),
      );
    } else {
      throw Exception("Unsupported type: ${any.runtimeType}");
    }
  }

  dynamic get value => when(
        none: () => null,
        boolean: (v) => v,
        integer: (v) => v,
        float: (v) => v,
        bigint: (v) => BigInt.parse(v),
        string: (v) => v,
        array: (v) => v.map((e) => e.value).toList(),
        object: (v) => v.map((key, value) => MapEntry(key, value.value)),
      );

  bool get isNone => this is JsValue_None;

  bool get isBoolean => this is JsValue_Boolean;

  bool get isInteger => this is JsValue_Integer;

  bool get isFloat => this is JsValue_Float;

  bool get isBigint => this is JsValue_Bigint;

  bool get isString => this is JsValue_String;

  bool get isArray => this is JsValue_Array;

  bool get isObject => this is JsValue_Object;

                }
            